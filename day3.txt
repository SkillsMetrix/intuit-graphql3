import { ApolloServer } from "apollo-server";
import { ApolloServerPluginLandingPageGraphQLPlayground } from "apollo-server-core";
import typeDefs from "./schemaGql.js";
import resolvers from "./resolvers.js";
import mongoose from "mongoose";
import { MONGO_URL, JWT_SECRET } from "./config.js";
import jwt from "jsonwebtoken";

mongoose.connect(MONGO_URL, {});
mongoose.connection.on("connected", () => {
  console.log("MongoDB is connected...!");
});

//import models here

import "./models/User.js";
import "./models/Quotes.js";

const context = ({ req }) => {
  const { authorization } = req.headers;
  if (authorization) {
    const { userId } = jwt.verify(authorization, JWT_SECRET);
    return { userId };
  }
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context,
  plugins: [ApolloServerPluginLandingPageGraphQLPlayground()],
});

server.listen().then(({ url }) => {
  console.log(` server is ready at ${url}`);
});

---------------

import { quotes, users } from "../userdb.js";
import mongoose from "mongoose";
import User from "./models/User.js";
import Quote from "./models/Quotes.js";

import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { JWT_SECRET } from "./config.js";

const resolvers = {
  Query: {
    users: () => users,
    user: (_, { _id }) => users.find((user) => user._id == _id),
    quotes: () => quotes,
    iquote: (_, { by }) => quotes.filter((quote) => quote.by == by),
  },
  User: {
    quotes: (ur) => quotes.filter((quote) => quote.by == ur._id),
  },
  Mutation: {
    signupUser: async (_, { userNew }) => {
      const user = await User.findOne({ email: userNew.email });
      if (user) {
        throw new Error("User already exist with this email...!");
      }
      const hashedPassword = await bcrypt.hash(userNew.password, 12);
      const newUser = new User({
        ...userNew,
        password: hashedPassword,
      });
      return await newUser.save();
    },
    signinUser: async (_, { userSignin }) => {
      const user = await User.findOne({ email: userSignin.email });
      if (!user) {
        throw new Error("User doest not exist with this email...!");
      }
      const doMatch = await bcrypt.compare(userSignin.password, user.password);
      if (!doMatch) {
        throw new Error("Email / Password is invalid...!");
      }
      const token = jwt.sign({ userId: user._id }, JWT_SECRET);
      return { token };
    },
    createQuote:async (_,{name},{userId})=>{
      if(!userId) throw new Error("you must Logged in...!")
        const newQuote= new Quote({
      name,
      by:userId
    })
    await newQuote.save()
    return "Quote Saved..!"
    }
  },
};

export default resolvers;
