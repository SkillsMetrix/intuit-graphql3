import { quotes, users } from "../userdb.js";
 import mongoose from "mongoose";
 import User from "./models/User.js";
 import bcrypt from 'bcryptjs'

const resolvers = {
  Query: {
    users: () => users,
    user: (_, { _id }) => users.find((user) => user._id == _id),
    quotes: () => quotes,
    iquote: (_, { by }) => quotes.filter((quote) => quote.by == by),
  },
  User: {
    quotes: (ur) => quotes.filter((quote) => quote.by == ur._id),
  },
  Mutation: {
    signupUser: async (_, { userNew }) => {
      const user =  await User.findOne({ email: userNew.email });
      if (user) {
        throw new Error("User already exist with this email...!");
      }
      const hashedPassword = await bcrypt.hash(userNew.password, 12);
      const newUser = new User({
        ...userNew,
        password: hashedPassword,
      });
      return await newUser.save();
    },
  },
};

export default resolvers;
