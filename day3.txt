import {gql} from "apollo-server"
const typeDefs = gql`
 type Query{
    users:[User]
    user(id:ID!):User
    quotes:[Quote]
    iquote(by:ID!):[Quote]
 }
 type User{
     id:ID!
     firstName:String
     lastName:String
     email:String
     password:String
     quotes:[Quote]
 }
 type Quote{
     name:String
     by:ID
 }

 type Mutation{
     signupUserDummy(userNew:UserInput!):User
 }

 input UserInput{
    firstName:String!
    lastName:String!
    email:String!
    password:String!
 }

`
export default typeDefs


--------


import {quotes,users} from './fakedb.js'
import {randomBytes} from 'crypto'
const resolvers = {
    Query:{
       users:()=>users,
       user:(_,{id})=>users.find(user=>user.id == id),
       quotes:()=>quotes,
       iquote:(_,{by})=>quotes.filter(quote=>quote.by == by)
    },
    User:{
        quotes:(ur)=>quotes.filter(quote=>quote.by == ur.id)
    },
    Mutation:{
        signupUserDummy:(_,{userNew})=>{
             const id = randomBytes(5).toString("hex")
             users.push({
                 id,
                 ...userNew
             })
            return users.find(user=>user.id == id)
        }
    }
}

export default resolvers



