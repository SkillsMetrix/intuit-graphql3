import { ApolloServer, gql } from "apollo-server";
import { ApolloServerPluginLandingPageGraphQLPlayground } from "apollo-server-core";

const typeDefs = gql`
  type Book {
    id: ID
    title: String
    author: String
  }

  type Movie {
    id: ID
    title: String
    director: String
  }
  union SearchResult = Book | Movie

  type Query {
    search(term: String): [SearchResult]
    getBooks: [Book]
    getMovies: [Movie]
  }
  type Quote {
    name: String
    by: ID
  }
`;

const books = [
  { id: "1", title: "1987", author: "george" },
  { id: "2", title: "brave world", author: "Aldous" },
];
const movies = [
  { id: "1", title: "Inception", director: "Nolan" },
  { id: "2", title: "The Matrix", director: "Lilly" },
];

const resolvers = {
  Query: {
    search: (_, { term }) => {
      return [
        ...books.filter((book) => book.title.includes(term)),
        ...movies.filter((movie) => movie.title.includes(term)),
      ];
    },
    getBooks: () => books,
    getMovies: () => movies,
  },
  SearchResult: {
    __resolveType(obj) {
      if (obj.author) {
        return "Book";
      }
      if (obj.director) {
        return "Movie";
      }
      return null;
    },
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  plugins: [ApolloServerPluginLandingPageGraphQLPlayground()],
});

server.listen().then(({ url }) => {
  console.log(` server is ready at ${url}`);
});



------------

import { ApolloServer, gql } from "apollo-server";
import { ApolloServerPluginLandingPageGraphQLPlayground } from "apollo-server-core";

const typeDefs = gql`
  enum MediaType {
    BOOK
    MOVIE
  }

  interface Media {
    id: ID
    title: String
    type: MediaType
  }
  type Book implements Media {
    id: ID
    title: String
    author: String
    type: MediaType
  }

  type Movie implements Media {
    id: ID
    title: String
    director: String
    type: MediaType
  }
  union SearchResult = Book | Movie

  type Query {
    search(term: String): [SearchResult]
    getBooks: [Book]
    getMovies: [Movie]
  }
  type Quote {
    name: String
    by: ID
  }
`;

const books = [
  { id: "1", title: "1987", author: "george", type: "BOOK" },
  { id: "2", title: "brave world", author: "Aldous", type: "BOOK" },
];
const movies = [
  { id: "1", title: "Inception", director: "Nolan", type: "MOVIE" },
  { id: "2", title: "The Matrix", director: "Lilly", type: "MOVIE" },
];

const resolvers = {
  Query: {
    search: (_, { term }) => {
      return [
        ...books.filter((book) => book.title.includes(term)),
        ...movies.filter((movie) => movie.title.includes(term)),
      ];
    },
    getBooks: () => books,
    getMovies: () => movies,
  },
  SearchResult: {
    __resolveType(obj) {
      if (obj.author) {
        return "Book";
      }
      if (obj.director) {
        return "Movie";
      }
      return null;
    },
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  plugins: [ApolloServerPluginLandingPageGraphQLPlayground()],
});

server.listen().then(({ url }) => {
  console.log(` server is ready at ${url}`);
});
